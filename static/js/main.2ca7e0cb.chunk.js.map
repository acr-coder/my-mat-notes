{"version":3,"sources":["components/NoteCard.js","pages/Notes.js","pages/Create.js","components/Layout.js","pages/Tablo.js","App.js","index.js"],"names":["useStyles","makeStyles","avatar","backgroundColor","note","category","yellow","green","pink","blue","subColor","color","NoteCard","handleDelete","classes","Card","elevation","CardHeader","Avatar","className","toUpperCase","action","IconButton","onClick","id","DeleteOutlined","title","subheader","Typography","tarih","CardContent","variant","details","Notes","notes","setNotes","useEffect","fetch","then","res","json","data","a","method","newNotes","filter","Container","Grid","container","spacing","map","item","xs","md","lg","field","marginTop","marginBottom","display","Create","history","useHistory","useState","setTitle","setDetails","titleError","setTitleError","detailsError","setDetailsError","setCategory","setTarih","component","gutterBottom","noValidate","autoComplete","onSubmit","e","preventDefault","headers","body","JSON","stringify","push","TextField","onChange","target","value","label","type","fullWidth","required","error","multiline","rows","InputLabelProps","shrink","FormControl","FormLabel","RadioGroup","FormControlLabel","control","Radio","Button","endIcon","theme","root","page","background","width","padding","drawer","drawerPaper","active","deepOrange","appbar","toolbar","mixins","date","flexGrow","marginLeft","Layout","children","location","useLocation","aGiderList","aGider","aGelirList","aGelir","mGiderList","mGider","mGelirList","mGelir","parseInt","i","length","menuItems","text","icon","Badge","badgeContent","SubjectOutlined","path","AddCircleOutlined","max","showZero","CallMade","CallReceived","TrendingFlatOutlined","AppBar","Toolbar","format","Date","src","Drawer","anchor","paper","List","ListItem","button","pathname","ListItemIcon","ListItemText","primary","table","minWidth","Tablo","mynotes","setMynotes","TableContainer","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","scope","createTheme","palette","main","secondary","agelir","typography","fontFamily","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","App","ThemeProvider","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ca7e0cb.chunk.js","sourcesContent":["import React from 'react'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { Avatar, IconButton, Typography } from '@material-ui/core';\r\nimport { DeleteOutlined } from '@material-ui/icons';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { blue, deepOrange, green, pink, yellow } from '@material-ui/core/colors'\r\n\r\nconst useStyles = makeStyles({\r\n    avatar: {\r\n        backgroundColor: (note) => {\r\n            if (note.category === 'ali-gelir'){\r\n                return yellow[700]\r\n            }\r\n            if (note.category === 'ali-gider'){\r\n                return green[500]\r\n            }\r\n            if (note.category === 'murat-gelir'){\r\n                return pink[700]\r\n            }\r\n            if (note.category === 'murat-gider'){\r\n                return blue[500]\r\n            }\r\n        }\r\n    },\r\n    subColor: {\r\n        color: (note) => {\r\n            if (note.category === 'ali-gelir'){\r\n                return yellow[700]\r\n            }\r\n            if (note.category === 'ali-gider'){\r\n                return green[500]\r\n            }\r\n            if (note.category === 'murat-gelir'){\r\n                return pink[700]\r\n            }\r\n            if (note.category === 'murat-gider'){\r\n                return blue[500]\r\n            }\r\n        }\r\n    }, \r\n})\r\n\r\nconst NoteCard = ({ note, handleDelete }) => {\r\n    const classes = useStyles(note)\r\n    return (\r\n        <div>\r\n            <Card elevation={1}  >\r\n                <CardHeader\r\n                avatar={\r\n                    <Avatar className={classes.avatar} >\r\n                        {note.category[0].toUpperCase()}\r\n                    </Avatar>\r\n                }\r\n                action={\r\n                    <IconButton onClick={() => handleDelete(note.id)} >\r\n                        <DeleteOutlined />\r\n                    </IconButton>\r\n                }\r\n                title={note.title}\r\n                subheader={<Typography className={classes.subColor} >{note.category}({note.tarih})</Typography>}\r\n                \r\n                \r\n                 />\r\n                 <CardContent>\r\n                     <Typography variant=\"body2\" color=\"textSecondary\" >\r\n                         {note.details}\r\n                     </Typography>\r\n                 </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NoteCard\r\n","import React, { useEffect, useState} from 'react'\nimport { Container, Grid, Paper } from '@material-ui/core'\nimport NoteCard from '../components/NoteCard'\nimport Masonry from 'react-masonry-css'\n\nexport default function Notes({notes, setNotes}) {\n  \n  useEffect( () => {\n    fetch('http://localhost:8001/notes')\n    .then(res => res.json())\n    .then(data => setNotes(data))    \n\n  }, [])\n\n  const handleDelete = async (id) => {\n      await fetch('http://localhost:8001/notes/' + id, {\n        method: 'DELETE'\n      })\n\n      const newNotes = notes.filter(note => note.id !== id)\n      setNotes(newNotes)\n  }\n\n  return (\n    <Container>\n      \n\n      <Grid container spacing={3} >\n\n      {notes.map(note => (\n        <Grid item key={note.id} xs={12} md={6} lg={4} >\n          <NoteCard note={note} handleDelete={handleDelete} />         \n          </Grid>\n      ))}\n\n      </Grid>\n      \n    </Container>\n    \n  )\n}\n\n\n","import React, { useState } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Button, FormControl, FormLabel, FormControlLabel, Radio, RadioGroup } from \"@material-ui/core\";\nimport { ButtonGroup } from \"@material-ui/core\";\nimport { Container } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core\";\nimport KeyboardArrowRightOutlinedIcon from \"@material-ui/icons/KeyboardArrowRightOutlined\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { useHistory } from \"react-router\";\n\n\nconst useStyles = makeStyles({\n  field: {\n    marginTop: 20,\n    marginBottom: 20,\n    display: \"block\",\n  },\n});\n\nexport default function Create() {\n  const classes = useStyles();\n  const history = useHistory()\n  const [title, setTitle] = useState(\"\");\n  const [details, setDetails] = useState(\"\");\n  const [titleError, setTitleError] = useState(false);\n  const [detailsError, setDetailsError] = useState(false);\n  const [category, setCategory] = useState('')\n  const [tarih, setTarih] = useState('')\n  \n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setTitleError(false)\n    setDetailsError(false)\n    \n\n    if (title === ''){\n      setTitleError(true)\n    }\n    if (details === ''){\n      setDetailsError(true)\n    }\n    \n\n    if (title && details) {\n      //console.log(title, details, category);\n      fetch('http://localhost:8001/notes', {\n        method: 'POST',\n        headers: {\"Content-type\":\"application/json\"},\n        body: JSON.stringify({title, details, category, tarih})\n      }).then(() => history.push('/'))\n    }\n  };\n\n  return (\n    <Container>\n      <Typography\n        variant=\"h6\"\n        color=\"textSecondary\"\n        component=\"h2\"\n        gutterBottom\n      >\n        Not Oluştur\n      </Typography>\n\n      <form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n        <TextField\n          onChange={(e) => setTitle(e.target.value)}\n          className={classes.field}\n          label=\"Miktar\"\n          type=\"number\"\n          variant=\"outlined\"\n          color=\"secondary\"\n          fullWidth\n          required\n          error={titleError}\n        />\n        <TextField\n          onChange={(e) => setDetails(e.target.value)}\n          className={classes.field}\n          label=\"Açıklama\"\n          variant=\"outlined\"\n          color=\"secondary\"\n          multiline\n          rows={4}\n          fullWidth\n          required\n          error={detailsError}\n        />\n        <TextField\n        onChange={(e) => setTarih(e.target.value)}\n    id=\"date\"\n    label=\"Tarih\"\n    type=\"date\"\n    \n    className={classes.field}\n    InputLabelProps={{\n      shrink: true,\n    }}\n  />\n        <FormControl className={classes.field} >\n        <FormLabel>Categori</FormLabel>\n        <RadioGroup value={category} onChange={(e) => setCategory(e.target.value)}  >\n          <FormControlLabel value=\"ali-gelir\" control={<Radio />} label=\"Ali Gelir\" />\n          <FormControlLabel value=\"ali-gider\" control={<Radio />} label=\"Ali Gider\" />\n          <FormControlLabel value=\"murat-gelir\" control={<Radio />} label=\"Murat Gelir\" />\n          <FormControlLabel value=\"murat-gider\" control={<Radio />} label=\"Murat Gider\" />\n        \n        </RadioGroup>\n        </FormControl>\n        <Button\n          type=\"submit\"\n          color=\"secondary\"\n          variant=\"contained\"\n          endIcon={<KeyboardArrowRightOutlinedIcon />}\n        >\n          Submit\n        </Button>\n      </form>\n\n      \n    </Container>\n  );\n}\n","import React, {useState} from \"react\";\r\nimport { deepOrange, yellow } from \"@material-ui/core/colors\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { Badge, Drawer, Typography } from \"@material-ui/core\";\r\nimport { List, ListItem, ListItemIcon, ListItemText } from \"@material-ui/core\";\r\nimport SentimentSatisfiedAltIcon from '@material-ui/icons/SentimentSatisfiedAlt';\r\nimport SentimentVeryDissatisfiedIcon from '@material-ui/icons/SentimentVeryDissatisfied';\r\nimport { useHistory, useLocation } from \"react-router\";\r\nimport { AppBar,Toolbar } from \"@material-ui/core\";\r\nimport {format} from 'date-fns'\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport { AddCircleOutlined, CallMade, CallReceived, SubjectOutlined, TrendingFlatOutlined } from \"@material-ui/icons\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  page: {\r\n    background: \"#f9f9f9\",\r\n    width: \"100%\",\r\n    padding: theme.spacing(3)\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  active:{\r\n      background:deepOrange[200]\r\n  },\r\n  title:{\r\n      padding: theme.spacing(3),\r\n  },\r\n  appbar: {\r\n      width: `calc(100% - ${drawerWidth}px)`\r\n  },\r\n  toolbar: theme.mixins.toolbar,\r\n  date: {\r\n      flexGrow:1,\r\n  },\r\n  avatar:{\r\n    marginLeft:theme.spacing(2)\r\n  }\r\n}));\r\n\r\nconst Layout = ({ children, notes}) => {\r\n    \r\n  const classes = useStyles();\r\n  const history = useHistory()\r\n  const location = useLocation()\r\n\r\n   const aGiderList = [] \r\n   let aGider = 0\r\n   const aGelirList = [] \r\n   let aGelir = 0\r\n   const mGiderList = [] \r\n   let mGider = 0\r\n   const mGelirList = [] \r\n   let mGelir = 0\r\n\r\n   let dGelir = 0\r\n   let dGider = 0\r\n   let dukkan = 0\r\n\r\n   notes.map(note => {\r\n     if(note.category === 'ali-gider'){\r\n       aGiderList.push(parseInt(note.title))\r\n     }\r\n     if(note.category === 'ali-gelir'){\r\n      aGelirList.push(parseInt(note.title))\r\n    }\r\n    if(note.category === 'murat-gider'){\r\n      mGiderList.push(parseInt(note.title))\r\n    }\r\n    if(note.category === 'murat-gelir'){\r\n     mGelirList.push(parseInt(note.title))\r\n   }\r\n   })\r\n\r\n   for(let i = 0;i<aGiderList.length; i++){\r\n      aGider += aGiderList[i]\r\n   }\r\n   for(let i = 0;i<aGelirList.length; i++){\r\n    aGelir += aGelirList[i]\r\n }\r\n for(let i = 0;i<mGiderList.length; i++){\r\n  mGider += mGiderList[i]\r\n}\r\nfor(let i = 0;i<mGelirList.length; i++){\r\nmGelir += mGelirList[i]\r\n}\r\n\r\n   \r\n   \r\n  \r\n  const menuItems = [\r\n    {\r\n      text: \"My Notes\",\r\n      icon: <Badge badgeContent={notes.length} color=\"secondary\"> <SubjectOutlined color=\"secondary\" /></Badge>,\r\n      path: \"/\",\r\n    },\r\n    {\r\n      text: \"Create Note\",\r\n      icon: <AddCircleOutlined color=\"secondary\" />,\r\n      path: \"/create\",\r\n    },\r\n    {\r\n      text: \"Tablo\",\r\n      icon: <AddCircleOutlined color=\"secondary\" />,\r\n      path: \"/tablo\",\r\n    },\r\n    {\r\n      text: \"Ali Gelir\",\r\n      icon: <Badge max={99999999999999999999} badgeContent={aGelir} color=\"error\" showZero > <SentimentSatisfiedAltIcon color=\"error\" /></Badge>,\r\n      path: \"/aligelir\",\r\n    },\r\n    {\r\n      text: \"Ali Gider\",\r\n      icon: <Badge max={99999999999999999999} badgeContent={aGider} color=\"error\" showZero > <SentimentVeryDissatisfiedIcon color=\"error\" /></Badge>,\r\n      path: \"/aligider\",\r\n    },\r\n    {\r\n      text: \"Murat Gelir\",\r\n      icon: <Badge max={99999999999999999999} badgeContent={mGelir} color=\"error\" showZero > <SentimentSatisfiedAltIcon color=\"error\" /></Badge>,\r\n      path: \"/muratgelir\",\r\n    },\r\n    {\r\n      text: \"Murat Gider\",\r\n      icon: <Badge max={99999999999999999999} badgeContent={mGider} color=\"error\" showZero > <SentimentVeryDissatisfiedIcon color=\"error\" /></Badge>,\r\n      path: \"/muratgider\",\r\n    },\r\n    {\r\n      text: \"Gelir\",\r\n      icon: <Badge max={99999999999999999999} badgeContent={aGelir + mGelir} color=\"error\" showZero  ><CallMade color=\"error\"  /> </Badge>,\r\n      path: \"/toplamgelir\",\r\n    },\r\n    {\r\n      text: \"Gider\",\r\n      icon: <Badge max={99999999999999999999} badgeContent={aGider + mGider} color=\"error\" showZero ><CallReceived color=\"error\" /> </Badge>,\r\n      path: \"/toplamgider\",\r\n    },\r\n    {\r\n      text: \"Mağaza \",\r\n      icon: <Badge max={99999999999999999999} badgeContent={aGelir + mGelir - aGider - mGider} color=\"error\" showZero > <TrendingFlatOutlined color=\"error\"/> </Badge>,\r\n      path: \"/toplam\",\r\n    },\r\n  ];\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* app bar */}\r\n        <AppBar className={classes.appbar} >\r\n            <Toolbar>\r\n                <Typography className={classes.date} >\r\n                { format(new Date(), 'dd-MM-yyyy') }\r\n                </Typography>\r\n                <Avatar src=\"/me.png\" className={classes.avatar} />\r\n            </Toolbar>\r\n        </AppBar>\r\n      {/* side bar */}\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"permanent\"\r\n        anchor=\"left\"\r\n        classes={{ paper: classes.drawerPaper }}\r\n      >\r\n        <div>\r\n          <Typography variant=\"h5\" className={classes.title} >Alish Place</Typography>\r\n        </div>\r\n        <List>\r\n          {menuItems.map((item) => (\r\n            <ListItem \r\n            key={item.text} \r\n            button \r\n            onClick={() => history.push(item.path)} \r\n            className={location.pathname === item.path ? classes.active : null}\r\n            >\r\n              <ListItemIcon>{item.icon}</ListItemIcon>\r\n              <ListItemText primary={item.text} />\r\n            </ListItem>\r\n          ))}\r\n          \r\n        </List>\r\n      </Drawer>\r\n      <div className={classes.page}>\r\n          <div className={classes.toolbar} ></div>\r\n          {children}\r\n          </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import React, {useState, useEffect} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n});\r\n\r\n\r\n\r\nexport default function Tablo({notes}) {\r\n  const classes = useStyles();\r\n\r\n  const [mynotes, setMynotes] = useState([])\r\n\r\n  \r\n  useEffect( () => {\r\n    fetch('http://localhost:8001/notes')\r\n    .then(res => res.json())\r\n    .then(data => setMynotes(data))    \r\n    \r\n\r\n  }, [])\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Category</TableCell>\r\n            <TableCell align=\"right\">Tarih</TableCell>\r\n            <TableCell align=\"right\">Miktar</TableCell>\r\n            \r\n            \r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {mynotes.map((note) => (\r\n            <TableRow key={note.id}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {note.category}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{note.tarih}</TableCell>\r\n              <TableCell align=\"right\">{note.title}</TableCell>\r\n              \r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}","import React, {useState, useEffect} from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport Notes from './pages/Notes'\nimport Create from './pages/Create'\nimport { createTheme, ThemeProvider } from '@material-ui/core';\nimport { deepOrange, yellow } from '@material-ui/core/colors';\nimport Layout from './components/Layout';\nimport Tablo from './pages/Tablo';\n\n\nconst theme = createTheme({\n  palette:{\n    primary:{\n      main: '#fefefe'\n    },\n    secondary: {\n      main: deepOrange[500],\n      \n    },\n    agelir: yellow[700],\n  },\n  typography:{\n    fontFamily: 'Quicksand',\n    fontWeightLight: 400,\n    fontWeightRegular: 500,\n    fontWeightMedium: 600,\n    fontWeightBold: 700,\n  }\n})\n\nfunction App() {\n  const [notes, setNotes] = useState([])\n  \n  \n  return (\n    <ThemeProvider theme={theme} >\n    <Router>\n      <Layout notes={notes}  >\n      <Switch>\n        <Route exact path=\"/\">\n          <Notes notes={notes} setNotes={setNotes} />\n        </Route>\n        <Route path=\"/create\">\n          <Create />\n        </Route>\n        <Route path=\"/tablo\">\n          <Tablo notes={notes}  />\n        </Route>\n      </Switch>\n      </Layout>\n    </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}